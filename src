import os
import shutil
import json
import tkinter as tk
from tkinter import scrolledtext, filedialog, messagebox, colorchooser
from tkinter import ttk
from tkcalendar import Calendar, DateEntry

class FalloutTerminalApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Fallout 4 Terminal Notepad")
        self.root.configure(bg="black")

        # Set style
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("TButton", background="gray", foreground="green", font=("Courier", 10))
        style.configure("TLabel", background="black", foreground="green", font=("Courier", 10))
        style.configure("TMenu", background="black", foreground="green", font=("Courier", 10))

        # Menu bar
        menubar = tk.Menu(root)
        
        # File menu
        file_menu = tk.Menu(menubar, tearoff=0, bg="black", fg="green")
        file_menu.add_command(label="New", command=self.new_file)
        file_menu.add_command(label="Open", command=self.open_file)
        file_menu.add_command(label="Save", command=self.save_file)
        file_menu.add_separator()
        file_menu.add_command(label="Open .txt File", command=self.open_txt_file)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.close_app)
        menubar.add_cascade(label="File", menu=file_menu)
        
        # Edit menu
        edit_menu = tk.Menu(menubar, tearoff=0, bg="black", fg="green")
        edit_menu.add_command(label="Change Text Color", command=self.change_text_color)
        edit_menu.add_command(label="Change Background Color", command=self.change_bg_color)
        edit_menu.add_command(label="Reset Colors to Default", command=self.reset_colors)
        menubar.add_cascade(label="Edit", menu=edit_menu)

        # Calendar menu
        calendar_menu = tk.Menu(menubar, tearoff=0, bg="black", fg="green")
        calendar_menu.add_command(label="Show Calendar", command=self.show_calendar)
        menubar.add_cascade(label="Calendar", menu=calendar_menu)
        
        root.config(menu=menubar)

        # Text area
        self.text_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, bg="black", fg="green", font=("Courier", 10), insertbackground="white")
        self.text_area.pack(expand=True, fill='both')

        # Command entry
        self.command_entry = tk.Entry(root, bg="black", fg="green", font=("Courier", 10), insertbackground="white")
        self.command_entry.pack(fill='x')
        self.command_entry.bind("<Return>", self.execute_command)

        self.current_directory = os.getcwd()
        self.display_current_directory()

        # Load calendar events
        self.events_file = "calendar_events.json"
        self.calendar_events = self.load_events()

    def display_current_directory(self):
        self.text_area.insert(tk.END, f"\n{self.current_directory}> ", "prompt")
        self.text_area.see(tk.END)

    def execute_command(self, event):
        command = self.command_entry.get().strip()
        self.text_area.insert(tk.END, f"{command}\n", "command")
        self.command_entry.delete(0, tk.END)

        if command.startswith("cd "):
            try:
                os.chdir(command[3:])
                self.current_directory = os.getcwd()
            except FileNotFoundError:
                self.text_area.insert(tk.END, "Directory not found\n", "error")
        elif command == "ls":
            for item in os.listdir(self.current_directory):
                self.text_area.insert(tk.END, f"{item}\n", "output")
        elif command.startswith("cp "):
            try:
                src, dst = command[3:].split()
                shutil.copy(src, dst)
                self.text_area.insert(tk.END, f"Copied {src} to {dst}\n", "output")
            except Exception as e:
                self.text_area.insert(tk.END, f"Error: {e}\n", "error")
        elif command.startswith("mv "):
            try:
                src, dst = command[3:].split()
                shutil.move(src, dst)
                self.text_area.insert(tk.END, f"Moved {src} to {dst}\n", "output")
            except Exception as e:
                self.text_area.insert(tk.END, f"Error: {e}\n", "error")
        elif command.startswith("rm "):
            try:
                os.remove(command[3:])
                self.text_area.insert(tk.END, f"Removed {command[3:]}\n", "output")
            except Exception as e:
                self.text_area.insert(tk.END, f"Error: {e}\n", "error")
        elif command == "/new":
            self.new_file()
        elif command == "/open":
            self.open_file()
        elif command == "/save":
            self.save_file()
        elif command == "/open_txt":
            self.open_txt_file()
        elif command == "/close":
            self.close_app()
        elif command == "/commands":
            self.show_commands()
        else:
            self.text_area.insert(tk.END, "Invalid command\n", "error")

        self.display_current_directory()

    def new_file(self):
        self.text_area.delete('1.0', tk.END)
        self.text_area.insert(tk.END, "Creating a new file...\n", "output")

    def open_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            with open(file_path, 'r') as file:
                content = file.read()
            self.text_area.delete('1.0', tk.END)
            self.text_area.insert(tk.END, content)
            self.text_area.insert(tk.END, f"\nOpened file: {file_path}\n", "output")

    def open_txt_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if file_path:
            with open(file_path, 'r') as file:
                content = file.read()
            self.text_area.delete('1.0', tk.END)
            self.text_area.insert(tk.END, content)
            self.text_area.insert(tk.END, f"\nOpened .txt file: {file_path}\n", "output")

    def save_file(self):
        desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
        file_path = filedialog.asksaveasfilename(initialdir=desktop_path, defaultextension=".txt")
        if file_path:
            with open(file_path, 'w') as file:
                content = self.text_area.get('1.0', tk.END)
                file.write(content)
            self.text_area.insert(tk.END, f"\nSaved file: {file_path}\n", "output")

    def change_text_color(self):
        self.show_color_dialog("text")

    def change_bg_color(self):
        self.show_color_dialog("background")

    def show_color_dialog(self, color_type):
        color = colorchooser.askcolor(title="Choose color")[1]
        if color:
            if color_type == "text":
                self.text_area.config(fg=color)
                self.command_entry.config(fg=color)
            elif color_type == "background":
                self.text_area.config(bg=color)
                self.command_entry.config(bg=color)

    def reset_colors(self):
        self.text_area.config(bg="black", fg="green")
        self.command_entry.config(bg="black", fg="green")

    def close_app(self):
        self.root.quit()

    def show_calendar(self):
        cal_window = tk.Toplevel(self.root)
        cal_window.title("Calendar")
        cal_window.configure(bg="black")

        cal = Calendar(cal_window, selectmode='day', background="black", foreground="green", headersbackground="black", headersforeground="green", selectbackground="gray", selectforeground="black", font=("Courier", 10))
        cal.pack(pady=20)

        event_entry = tk.Entry(cal_window, bg="black", fg="green", font=("Courier", 10), insertbackground="white")
        event_entry.pack(fill='x')

        save_button = ttk.Button(cal_window, text="Add Event", command=lambda: self.add_event(cal, event_entry))
        save_button.pack(pady=10)

        self.display_events(cal)

    def add_event(self, calendar, event_entry):
        date = calendar.selection_get()
        event = event_entry.get()
        if date and event:
            if date not in self.calendar_events:
                self.calendar_events[date] = []
            self.calendar_events[date].append(event)
            self.save_events()
            event_entry.delete(0, tk.END)
            self.display_events(calendar)

    def display_events(self, calendar):
        for date, events in self.calendar_events.items():
            calendar.calevent_create(date, '\n'.join(events), 'message')

    def save_events(self):
        with open(self.events_file, 'w') as file:
            json.dump(self.calendar_events, file)

    def load_events(self):
        if os.path.exists(self.events_file):
            with open(self.events_file, 'r') as file:
                return json.load(file)
        return {}

    def show_commands(self):w
        commands = """
        /new - Create a new file
        /open - Open a file
        /save - Save the current file
        /open_txt - Open a .txt file
        /close - Close the application
        /commands - Show this list of commands
        """
        self.text_area.insert(tk.END, commands, "output")

if __name__ == "__main__":
    root = tk.Tk()
    app = FalloutTerminalApp(root)
    root.mainloop()
